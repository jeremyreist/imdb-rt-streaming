{"version":3,"file":"main.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACO;AACP,YAAY,qDAAqD,IAAI;AACrE,yDAAyD,eAAe;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8CAA8C;AAC9E;AACA;AACA;AACA,8BAA8B,0BAA0B;AACxD;AACA;AACA;AACA;AACA,uCAAuC,4BAA4B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,oCAAoC;AACpC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,sCAAsC,IAAI;AAC1C,KAAK,WAAW;AAChB;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,MAAM,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;AChLsD;AAC/C;AACP;AACA,0BAA0B,UAAU,GAAG,eAAe;AACtD;AACA;AACA,2DAA2D,mBAAmB,IAAI,oBAAoB,qDAAqD,iBAAiB,IAAI,kBAAkB;AAClM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,KAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,IAAI,UAAU,GAAG,gDAAgD;AACjE;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA,iDAAiD,UAAU;AAC3D;AACA,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA,IAAI,UAAU,GAAG,wEAAwE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACjE+E;AAC/E;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,IAAI,UAAU,GAAG,gDAAgD;AACjE;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,UAAU;AAC3D;AACA,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA,IAAI,UAAU,GAAG,wEAAwE;AACzF;AACA;AACA,iFAAiF;AACjF,IAAI,SAAS;AACb;AACA;AACA,wBAAwB,UAAU,GAAG,4BAA4B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB,IAAI,oBAAoB;AAChF;AACA;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB,IAAI,kBAAkB,4CAA4C,uBAAuB;AAC1J,qCAAqC,0BAA0B,KAAK,2BAA2B;AAC/F,yCAAyC,yBAAyB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY;AAChB;AACA;AACA;AACA;AACA,IAAI,SAAS;AACb,0BAA0B,UAAU,GAAG,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB,IAAI,oBAAoB;AAChF;AACA;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB,IAAI,kBAAkB,4CAA4C,uBAAuB;AAC1J;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrJ+E;AAC/E;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wBAAoB;AACpC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,KAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU,GAAG,eAAe;AAC5D;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,mEAAmE,mBAAmB,IAAI,oBAAoB,qDAAqD,iBAAiB,IAAI,kBAAkB;AAC1M,2CAA2C,uBAAuB,6BAA6B,0BAA0B,KAAK,2BAA2B,4CAA4C,yBAAyB;AAC9N,mFAAmF,yBAAyB,kBAAkB,oBAAoB,iBAAiB,uBAAuB,mBAAmB,mBAAmB;AAChO;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,UAAU,GAAG,eAAe;AAC1D;AACA;AACA,+DAA+D,mBAAmB,IAAI,oBAAoB,qDAAqD,iBAAiB,IAAI,kBAAkB;AACtM,+EAA+E,yBAAyB,kBAAkB,oBAAoB,iBAAiB,uBAAuB,mBAAmB;AACzM;AACA;AACA,kBAAkB,KAAK;AACvB;AACA;AACA,2CAA2C;AAC3C,oCAAoC,iCAAiC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,UAAU,GAAG,gDAAgD;AACjE,UAAU,KAAK;AACf;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,UAAU,GAAG,wEAAwE;AACzF;AACA,eAAe,wBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA,QAAQ,SAAS;AACjB,wBAAwB;AACxB;AACA;AACA,4BAA4B,UAAU,GAAG,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,mBAAmB,IAAI,oBAAoB,qDAAqD,iBAAiB,IAAI,kBAAkB;AACtM,+EAA+E,yBAAyB,kBAAkB,oBAAoB,iBAAiB,uBAAuB,kBAAkB;AACxM,QAAQ,YAAY;AACpB;AACA;AACA;AACA,gCAAgC,0CAA0C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU,GAAG,sBAAsB;AAC/D;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,+DAA+D,mBAAmB,IAAI,oBAAoB,mDAAmD,iBAAiB,IAAI,kBAAkB;AACpM,+EAA+E,yBAAyB,kBAAkB,oBAAoB,iBAAiB,uBAAuB,kBAAkB;AACxM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpR2E;AACwC;AACA;AACnH;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACA,IAAI,uBAAmB;AACvB;AACA;AACA;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC,gBAAgB,uBAAmB,GAAG,mBAAmB;AACzD;AACA,SAAS;AACT;AACA,YAAY,oBAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,uBAAmB,GAAG,eAAe;AACrD;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA,oBAAoB,uBAAmB;AACvC,oBAAoB,kBAAkB,CAAC,uBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uBAAmB;AAC/B;AACA;AACA,kDAAkD,uBAAmB;AACrE;AACA,YAAY,uBAAmB;AAC/B,YAAY,qBAAqB;AACjC;AACA;AACA;AACA,gBAAgB,uBAAmB;AACnC,gBAAgB,iBAAiB,CAAC,uBAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA,YAAY,aAAa;AACzB;AACA,mDAAmD,uBAAmB;AACtE;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA,YAAY,uBAAmB;AAC/B,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA,YAAY,cAAc,CAAC,uBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://imdb-rt-streaming/./src/utils/utils.ts","webpack://imdb-rt-streaming/./src/sites/disney+/index.ts","webpack://imdb-rt-streaming/./src/sites/netflix/index.ts","webpack://imdb-rt-streaming/./src/sites/hbo/index.ts","webpack://imdb-rt-streaming/./src/index.ts"],"sourcesContent":["let critic_fresh_src = chrome.runtime.getURL(\"critic_fresh.svg\");\r\nlet critic_rotten_src = chrome.runtime.getURL(\"critic_rotten.svg\");\r\nlet audience_fresh_src = chrome.runtime.getURL(\"audience_fresh.svg\");\r\nlet audience_rotten_src = chrome.runtime.getURL(\"audience_rotten.svg\");\r\nexport async function getRatings(params) {\r\n    const { id, episode, api = \"8mds8d7d55\", click, start, end } = { ...params };\r\n    let colorsEnabled = (await chrome.storage.sync.get({ 'color': true })).color;\r\n    if (!click) {\r\n        const localRating = await checkLocalStorage(id);\r\n        if (localRating) {\r\n            updateLocalRatingColors(localRating, colorsEnabled);\r\n            return localRating;\r\n        }\r\n    }\r\n    const apiUrl = new URL(`https://filmtoro.com/api/watch.asp`);\r\n    apiUrl.searchParams.append('id', id);\r\n    apiUrl.searchParams.append('api', api);\r\n    if (typeof click !== 'undefined')\r\n        apiUrl.searchParams.append('click', click.toString());\r\n    if (typeof episode !== 'undefined')\r\n        apiUrl.searchParams.append('episode', episode);\r\n    if (typeof start !== 'undefined')\r\n        apiUrl.searchParams.append('start', start.toString());\r\n    if (typeof end !== 'undefined')\r\n        apiUrl.searchParams.append('end', end.toString());\r\n    const request = await fetch(apiUrl);\r\n    const response = formatApiData(await request.json(), colorsEnabled);\r\n    await addToLocalStorage(id, response);\r\n    return response;\r\n}\r\nfunction updateLocalRatingColors(rating, colorsEnabled) {\r\n    if (colorsEnabled) {\r\n        let rt_integer = parseInt(rating.rt_rating.slice(0, 2));\r\n        let imdb_integer = parseInt(rating.imdb_rating.slice(0, 1)) * 10 + parseInt(rating.imdb_rating.slice(2));\r\n        rating.rt_color = getHexColor(rt_integer);\r\n        rating.imdb_color = getHexColor(imdb_integer);\r\n    }\r\n    else {\r\n        rating.imdb_color = \"#FFF\";\r\n        rating.rt_color = \"#FFF\";\r\n    }\r\n}\r\nasync function checkLocalStorage(titleHref) {\r\n    var localStorage = await chrome.storage.local.get([\"previous_ratings\"]);\r\n    if (!localStorage.previous_ratings) {\r\n        return null;\r\n    }\r\n    else {\r\n        if (localStorage.previous_ratings[titleHref]) {\r\n            return localStorage.previous_ratings[titleHref];\r\n        }\r\n        return null;\r\n    }\r\n}\r\nasync function addToLocalStorage(titleHref, rating) {\r\n    const initial_ratings = {};\r\n    var result = await chrome.storage.local.get([\"previous_ratings\"]);\r\n    if (!result.previous_ratings) {\r\n        // If we have not stored previous ratings before\r\n        initial_ratings[titleHref] = rating;\r\n        await chrome.storage.local.set({\r\n            previous_ratings: initial_ratings\r\n        });\r\n    }\r\n    else if (!(titleHref in result.previous_ratings)) {\r\n        // If we have stored ratings and it's not already stored\r\n        result.previous_ratings[titleHref] = rating;\r\n        await chrome.storage.local.set({\r\n            previous_ratings: result.previous_ratings,\r\n        });\r\n    }\r\n}\r\nfunction formatApiData(apiData, colorsEnabled) {\r\n    let output = {\r\n        rt_rating: 'N/A', imdb_rating: 'N/A', rt_audience_rating: '',\r\n        imdb_color: \"#FFF\", rt_color: \"#FFF\", rt_audience_color: \"#FFF\",\r\n        rt_critic_icon: '', rt_audience_icon: ''\r\n    };\r\n    if (apiData['film_imdb_rating'] > 0) {\r\n        output.imdb_rating = `${(apiData['film_imdb_rating'] / 10).toFixed(1)}`;\r\n        output.imdb_color = colorsEnabled ? getHexColor(apiData['film_imdb_rating']) : \"#FFF\";\r\n    }\r\n    if (apiData['film_rt_rating'] > 0) {\r\n        output.rt_rating = `${apiData['film_rt_rating']}%`;\r\n        output.rt_critic_icon = apiData['film_rt_rating'] >= 50 ? critic_fresh_src : critic_rotten_src;\r\n        output.rt_color = colorsEnabled ? getHexColor(apiData['film_rt_rating']) : \"#FFF\";\r\n    }\r\n    if (apiData['film_rt_audience'] > 0) {\r\n        output.rt_audience_rating = `${apiData['film_rt_audience']}%`;\r\n        output.rt_audience_icon = apiData['film_rt_audience'] >= 50 ? audience_fresh_src : audience_rotten_src;\r\n        output.rt_audience_color = colorsEnabled ? getHexColor(apiData['film_rt_audience']) : \"#FFF\";\r\n    }\r\n    return output;\r\n}\r\nfunction getHexColor(rating) {\r\n    // Define the endpoint colors\r\n    const startColor = [237, 38, 48]; // Bright Red (RGB)\r\n    const endColor = [17, 217, 17]; // Bright Green (RGB)\r\n    // Calculate the interpolated color\r\n    const lerpedColor = startColor.map((startValue, index) => {\r\n        const endValue = endColor[index];\r\n        return Math.round(startValue + (endValue - startValue) * (rating / 100));\r\n    });\r\n    // Convert RGB color to hex\r\n    return rgbToHex(lerpedColor);\r\n}\r\n// Helper function to convert RGB color to hex color\r\nfunction rgbToHex(rgb) {\r\n    return `#${rgb.map(val => {\r\n        const hex = val.toString(16);\r\n        return hex.length === 1 ? `0${hex}` : hex;\r\n    }).join('')}`;\r\n}\r\nexport function delay(time) {\r\n    return new Promise(resolve => setTimeout(resolve, time));\r\n}\r\nexport function addLoader(parent, scale = 1, insertBefore = false) {\r\n    const loader = document.createElement(\"div\");\r\n    loader.className = \"ratings-loader\";\r\n    loader.innerHTML = `\r\n\r\n  <div class=\"loadingio-spinner-rolling-mhlz99gyu8k\"><div class=\"ldio-ma7aqaeb3ij\">\r\n  <div></div>\r\n  </div></div>\r\n  <style type=\"text/css\">\r\n  @keyframes ldio-ma7aqaeb3ij {\r\n    0% { transform: translate(-50%,-50%) rotate(0deg); }\r\n    100% { transform: translate(-50%,-50%) rotate(360deg); }\r\n  }\r\n  .ldio-ma7aqaeb3ij div {\r\n    position: absolute;\r\n    width: 120px;\r\n    height: 120px;\r\n    border: 10px solid #ffffff;\r\n    border-top-color: transparent;\r\n    border-radius: 50%;\r\n  }\r\n  .ldio-ma7aqaeb3ij div {\r\n    animation: ldio-ma7aqaeb3ij 1s linear infinite;\r\n    top: 100px;\r\n    left: 100px\r\n  }\r\n  .loadingio-spinner-rolling-mhlz99gyu8k {\r\n    width: 50px;\r\n    height: 50px;\r\n    display: inline-block;\r\n    overflow: hidden;\r\n  }\r\n  .ldio-ma7aqaeb3ij {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    transform: translateZ(0) scale(0.25);\r\n    backface-visibility: hidden;\r\n    transform-origin: 0 0px; /* see note above */\r\n  }\r\n  .ldio-ma7aqaeb3ij div { box-sizing: content-box; }\r\n\r\n  .ratings-loader {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  </style>\r\n  `;\r\n    loader.setAttribute('style', `transform: scale(${scale});`);\r\n    if (insertBefore) {\r\n        parent.insertBefore(loader, parent.children[0]);\r\n    }\r\n    else {\r\n        parent.appendChild(loader);\r\n    }\r\n}\r\nexport function removeLoader(parent) {\r\n    const loader = parent.getElementsByClassName(\"ratings-loader\")[0];\r\n    parent.removeChild(loader);\r\n}\r\n","import { delay, getRatings } from \"../../utils/utils\";\r\nexport async function onDisneyDetailsScreen() {\r\n    const titleHref = window.location.href;\r\n    const ratings = await getRatings({ id: titleHref });\r\n    const ratingsElement = document.createElement(\"h4\");\r\n    ratingsElement.className = \"text-color--primary body-copy body-copy--large margin--left-4\";\r\n    ratingsElement.innerHTML = `IMDb: <span style=\"color:${ratings.imdb_color}\">${ratings.imdb_rating}</span> \\u00A0 Rotten Tomatoes: <span style=\"color:${ratings.rt_color}\">${ratings.rt_rating}</span>`;\r\n    var attempts = 0;\r\n    while (true) {\r\n        // done because of the dynamic page loading taking time\r\n        const parent = document.getElementsByClassName(\"button-play\");\r\n        if (parent.length) {\r\n            parent[0].parentElement.appendChild(ratingsElement);\r\n            break;\r\n        }\r\n        else {\r\n            attempts += 1;\r\n            await delay(100);\r\n        }\r\n        if (attempts === 100) {\r\n            console.error(\"Failed to get ratings!\");\r\n        }\r\n    }\r\n}\r\nexport async function onDisneyWatchPage(titleHref) {\r\n    const spliceIndex = window.location.href.indexOf(\"video/\") + \"video/\".length;\r\n    const episodeID = window.location.href.slice(spliceIndex);\r\n    var limit = 0;\r\n    getRatings({ id: titleHref, episode: episodeID, click: true });\r\n    // Waits for the video to load.\r\n    while (!document.getElementsByTagName('video').length || !document.getElementsByClassName('time-remaining-label').length || limit > 50) {\r\n        limit += 1;\r\n        await delay(500);\r\n    }\r\n    var endTime;\r\n    var startTime;\r\n    var durationString;\r\n    startTime = document.getElementsByTagName('video')[0].currentTime;\r\n    durationString = document.getElementsByClassName('time-remaining-label')[0].textContent; // e.g 01:50:01\r\n    var durationSeconds = hmsToSecondsOnly(durationString);\r\n    // While we are still watching the show, update the end time.\r\n    while (window.location.href.indexOf(`video/${episodeID}`) > 0) {\r\n        try {\r\n            if (window.location.href.indexOf(`video/${episodeID}`) > 0) {\r\n                if (!isNaN(document.getElementsByTagName('video')[0].currentTime)) {\r\n                    endTime = document.getElementsByTagName('video')[0].currentTime;\r\n                }\r\n            }\r\n        }\r\n        catch {\r\n            break;\r\n        }\r\n        await delay(10);\r\n    }\r\n    const start = Math.floor((startTime / durationSeconds) * 100);\r\n    const end = Math.floor((endTime / durationSeconds) * 100);\r\n    getRatings({ id: titleHref, episode: episodeID, click: true, start: start, end: end });\r\n}\r\nfunction hmsToSecondsOnly(str) {\r\n    var part = str.split(':'), seconds = 0, minutes = 1;\r\n    while (part.length > 0) {\r\n        seconds += minutes * parseInt(part.pop(), 10);\r\n        minutes *= 60;\r\n    }\r\n    return seconds;\r\n}\r\n","import { addLoader, delay, getRatings, removeLoader } from \"../../utils/utils\";\r\nvar lastGrabbedRatingsFromTitleCard = null;\r\nvar lastViewedTitleHref = null;\r\nexport async function onNetflixHomepage() {\r\n    const titleHref = getNetflixTitleHref();\r\n    if (lastViewedTitleHref != titleHref) {\r\n        lastViewedTitleHref = titleHref;\r\n        if (titleHref) {\r\n            handleTitleCardHover(lastViewedTitleHref);\r\n        }\r\n    }\r\n}\r\nexport async function onNetflixDetailsPage() {\r\n    if (lastViewedTitleHref)\r\n        handleShowInformationCard(lastViewedTitleHref);\r\n    else {\r\n        lastViewedTitleHref = getAlternateTitleHref();\r\n        if (lastViewedTitleHref)\r\n            handleShowInformationCard(lastViewedTitleHref);\r\n    }\r\n}\r\nexport async function onNetflixWatchPage(titleHref) {\r\n    const spliceIndex = window.location.href.indexOf(\"watch/\") + \"watch/\".length;\r\n    const episodeID = window.location.href.slice(spliceIndex, spliceIndex + 8);\r\n    var limit = 0;\r\n    getRatings({ id: titleHref, episode: episodeID, click: true });\r\n    // Waits for the video to load.\r\n    while (!document.getElementsByTagName('video').length || limit > 50) {\r\n        limit += 1;\r\n        await delay(500);\r\n    }\r\n    var endTime;\r\n    var startTime;\r\n    var duration;\r\n    startTime = document.getElementsByTagName('video')[0].currentTime;\r\n    duration = document.getElementsByTagName('video')[0].duration;\r\n    // While we are still watching the show, update the end time.\r\n    while (window.location.href.indexOf(`watch/${episodeID}`) > 0) {\r\n        try {\r\n            if (window.location.href.indexOf(`watch/${episodeID}`) > 0) {\r\n                if (!isNaN(document.getElementsByTagName('video')[0].currentTime)) {\r\n                    endTime = document.getElementsByTagName('video')[0].currentTime;\r\n                }\r\n            }\r\n        }\r\n        catch {\r\n            break;\r\n        }\r\n        await delay(10);\r\n    }\r\n    const start = Math.floor((startTime / duration) * 100);\r\n    const end = Math.floor((endTime / duration) * 100);\r\n    getRatings({ id: titleHref, episode: episodeID, click: true, start: start, end: end });\r\n}\r\nasync function handleShowInformationCard(titleHref) {\r\n    const parent = document.getElementsByClassName(\"detail-modal-container\")[0]; // Info box.\r\n    addLoader(parent, /*number=*/ 1, /*insertBefore=*/ true);\r\n    let ratings;\r\n    if (!lastGrabbedRatingsFromTitleCard || lastGrabbedRatingsFromTitleCard.id != titleHref) {\r\n        ratings = await getRatings({ id: titleHref, click: true });\r\n        lastGrabbedRatingsFromTitleCard = ratings;\r\n        lastGrabbedRatingsFromTitleCard.id = titleHref;\r\n    }\r\n    else {\r\n        // Use cached ratings if we have them.\r\n        ratings = lastGrabbedRatingsFromTitleCard;\r\n    }\r\n    const ratingsElement = document.createElement(\"span\");\r\n    ratingsElement.className = \"previewModal--metadatAndControls-tags-container\";\r\n    ratingsElement.innerHTML =\r\n        `\r\n  <div class=\"evidence-tags\">\r\n    <div class=\"evidence-list\">\r\n      <div class=\"evidence-item\">\r\n        <span class=\"evidence-text\" style=\"font-size:20px\">\r\n          IMDb: <span style=\"color:${ratings.imdb_color}\">${ratings.imdb_rating}</span>\r\n        </span>\r\n      </div>\r\n      <div class=\"evidence-item\">\r\n        <span class=\"evidence-separator\"></span>\r\n        <span class=\"evidence-text\" style=\"font-size:20px\">\r\n          Rotten Tomatoes: <span style=\"color:${ratings.rt_color}\">${ratings.rt_rating}</span>\\u00A0<img style=\"width:15px\" src=\"${ratings.rt_critic_icon}\">\r\n          \\u00A0<span style=\"color:${ratings.rt_audience_color}\"> ${ratings.rt_audience_rating}\\u00A0</span>\r\n          <img style=\"width:15px\" src=\"${ratings.rt_audience_icon}\">\r\n        </span>\r\n        \r\n      </div>\r\n    </div>\r\n  </div>\r\n  `;\r\n    removeLoader(parent);\r\n    parent.insertBefore(ratingsElement, parent.children[0]);\r\n}\r\nasync function handleTitleCardHover(titleHref) {\r\n    const parent = document.getElementsByClassName(\"previewModal--metadatAndControls-container\")[0];\r\n    addLoader(parent);\r\n    const ratings = await getRatings({ id: titleHref });\r\n    lastGrabbedRatingsFromTitleCard = ratings;\r\n    lastGrabbedRatingsFromTitleCard.id = titleHref;\r\n    const ratingsElement = document.createElement(\"span\");\r\n    ratingsElement.className = \"previewModal--metadatAndControls-tags-container\";\r\n    ratingsElement.innerHTML =\r\n        `\r\n  <div class=\"evidence-tags\">\r\n    <div class=\"evidence-list\">\r\n      <div class=\"evidence-item\">\r\n        <span class=\"evidence-text\">\r\n          IMDb: <span style=\"color:${ratings.imdb_color}\">${ratings.imdb_rating}</span> \r\n        </span>\r\n      </div>\r\n      <div class=\"evidence-item\">\r\n        <span class=\"evidence-separator\"></span>\r\n        <span class=\"evidence-text\">\r\n          Rotten Tomatoes: <span style=\"color:${ratings.rt_color}\">${ratings.rt_rating}</span>\\u00A0<img style=\"width:13px\" src=\"${ratings.rt_critic_icon}\"> \r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  `;\r\n    removeLoader(parent);\r\n    insertBeforeProgressBar(ratingsElement, parent);\r\n}\r\nfunction insertBeforeProgressBar(element, parent) {\r\n    const progressBar = parent.getElementsByClassName(\"previewModal-progress\")[0];\r\n    if (progressBar) {\r\n        parent.insertBefore(element, progressBar);\r\n    }\r\n    else\r\n        parent.appendChild(element);\r\n}\r\nexport function getNetflixTitleHref() {\r\n    var previewModal = document.getElementsByClassName(\"previewModal--info\")[0];\r\n    try {\r\n        const titleHref = previewModal.children[0].href;\r\n        return titleHref.slice(0, titleHref.indexOf(\"/title/\") + \"/title/\".length + 8);\r\n    }\r\n    catch (TypeError) {\r\n        return null;\r\n    }\r\n}\r\nexport function getAlternateTitleHref() {\r\n    if (window.location.href.indexOf(\"title\") > -1) {\r\n        return window.location.href;\r\n    }\r\n    else if (window.location.href.indexOf(\"jbv\") > -1) {\r\n        let titleNumber = window.location.href.slice(window.location.href.indexOf(\"jbv=\") + 4);\r\n        return \"https://www.netflix.com/title/\" + titleNumber;\r\n    }\r\n    return null;\r\n}\r\n","import { addLoader, delay, getRatings, removeLoader } from \"../../utils/utils\";\r\nvar lastHoveredTitleHref = null;\r\nvar tilesLoadedOrBeingLoaded = new Set();\r\nvar allVisibleTiles = new Set();\r\nexport function clearAllHBOTiles() {\r\n    tilesLoadedOrBeingLoaded.clear();\r\n    allVisibleTiles.clear();\r\n    lastHoveredTitleHref = null;\r\n}\r\nexport async function onHBOHomepage() {\r\n    if (window.location.href.indexOf(\"play.max.com\") > -1) {\r\n        handleVisibleTiles();\r\n    }\r\n    else {\r\n        const titleHref = getHBOTitleHref();\r\n        // Makes sure we only load once per element\r\n        if (lastHoveredTitleHref != titleHref) {\r\n            lastHoveredTitleHref = titleHref;\r\n            if (titleHref) {\r\n                handleTitleCardHover();\r\n            }\r\n        }\r\n    }\r\n}\r\nexport async function onHBODetailsScreen() {\r\n    if (window.location.href.indexOf(\"play.max.com\") > -1) {\r\n        let metaElement = document.querySelector('meta[property=\"og:url\"]');\r\n        let showName = document.getElementsByTagName('title')[0].innerHTML;\r\n        let i = 0;\r\n        // Wait a max of 10s for title-containing element to appear.\r\n        while ((!metaElement || showName == \"Max\" || showName == \"Home • Max\") && i < 1000) {\r\n            await delay(10);\r\n            metaElement = document.querySelector('meta[property=\"og:url\"]');\r\n            showName = document.getElementsByTagName('title')[0].innerHTML;\r\n            i++;\r\n        }\r\n        let titleHref;\r\n        if (metaElement) {\r\n            titleHref = metaElement.getAttribute('content');\r\n        }\r\n        else {\r\n            console.log('Error: play link not found.');\r\n            return;\r\n        }\r\n        showName = showName.slice(0, showName.indexOf(\" • Max\"));\r\n        if (!tilesLoadedOrBeingLoaded.has(showName)) {\r\n            tilesLoadedOrBeingLoaded.add(showName);\r\n            let ratings;\r\n            try {\r\n                ratings = await getRatings({ id: titleHref });\r\n            }\r\n            catch (error) {\r\n                console.log(\"Error getting ratings for: \" + titleHref);\r\n                console.log(error);\r\n                ratings = { rt_rating: 'N/A', imdb_rating: 'N/A', imdb_color: \"#FFFFFF\", rt_color: \"#FFFFFF\" };\r\n            }\r\n            const ratingsElement = document.createElement(\"h2\");\r\n            ratingsElement.className = \"ratings css-1rynq56 r-dnmrzs r-1udh08x r-1udbk01 r-3s2u2q r-1iln25a\";\r\n            ratingsElement.innerHTML = `IMDb: <span style=\"color:${ratings.imdb_color}\">${ratings.imdb_rating}</span> \\u00A0 Rotten Tomatoes: <span style=\"color:${ratings.rt_color}\">${ratings.rt_rating}</span>\r\n      \\u00A0<img style=\"width:15px\" src=\"${ratings.rt_critic_icon}\">\\u00A0<span style=\"color:${ratings.rt_audience_color}\"> ${ratings.rt_audience_rating}\\u00A0</span><img style=\"width:15px\" src=\"${ratings.rt_audience_icon}\">`;\r\n            ratingsElement.setAttribute('style', 'color: rgba(255, 255, 255, 0.7); font-family: StreetLCG2; font-weight: 400; font-style: normal; font-size: 14px; letter-spacing: 0.5px; line-height: 18px; padding-left:20px; margin-top:30px');\r\n            ratingsElement.style.opacity = '0';\r\n            while (document.getElementsByClassName(\"StyledButtonRowWrapper-Beam-Web-Ent__sc-1kctvbk-0 bZyQWW\").length <= 0) {\r\n                await delay(10);\r\n            }\r\n            const parent = document.getElementsByClassName(\"StyledButtonRowWrapper-Beam-Web-Ent__sc-1kctvbk-0 bZyQWW\")[0];\r\n            if (parent.getElementsByClassName(\"ratings\").length == 0) {\r\n                parent.children[1].appendChild(ratingsElement);\r\n                fadeIn(ratingsElement, 0.0);\r\n            }\r\n        }\r\n        handleVisibleTiles();\r\n    }\r\n    else {\r\n        const titleHref = window.location.href.slice(0, window.location.href.indexOf(\":type:\"));\r\n        const ratings = await getRatings({ id: titleHref });\r\n        const ratingsElement = document.createElement(\"h2\");\r\n        ratingsElement.className = \"ratings css-1rynq56 r-dnmrzs r-1udh08x r-1udbk01 r-3s2u2q r-1iln25a\";\r\n        ratingsElement.innerHTML = `IMDb: <span style=\"color:${ratings.imdb_color}\">${ratings.imdb_rating}</span> \\u00A0 Rotten Tomatoes: <span style=\"color:${ratings.rt_color}\">${ratings.rt_rating}</span>`;\r\n        ratingsElement.setAttribute('style', 'color: rgba(255, 255, 255, 0.7); font-family: StreetLCG2; font-weight: 400; font-style: normal; font-size: 14px; letter-spacing: 0.5px; line-height: 18px; padding-left:20px');\r\n        var attempts = 0;\r\n        while (true) {\r\n            await delay(1000);\r\n            // done because of the dynamic page loading taking time\r\n            const buttonContainers = document.getElementsByClassName('css-175oi2r r-1awozwy r-18u37iz r-1mnahxq');\r\n            if (buttonContainers.length) { // If we have results from the query selector\r\n                for (let index = 0; index < buttonContainers.length; index++) {\r\n                    if (getComputedStyle(buttonContainers[index]).display == 'flex') {\r\n                        buttonContainers[index].appendChild(ratingsElement);\r\n                        fadeIn(ratingsElement, 0.1);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            else {\r\n                attempts += 1;\r\n                await delay(100);\r\n            }\r\n            if (attempts === 100) {\r\n                console.error(\"Failed to get ratings!\");\r\n            }\r\n        }\r\n    }\r\n}\r\nexport async function onHBOWatchPage(titleHref) {\r\n    if (titleHref.indexOf(\"?exitPageUrn\") > 0) {\r\n        titleHref = titleHref.slice(0, titleHref.indexOf(\"?exitPageUrn\"));\r\n    }\r\n    var spliceIndex = window.location.href.indexOf(\":episode:\") + \":episode:\".length;\r\n    if (spliceIndex == 8) {\r\n        spliceIndex = window.location.href.indexOf(\":feature:\") + \":feature:\".length;\r\n    }\r\n    // 21 is length of ID\r\n    const episodeID = window.location.href.slice(spliceIndex, spliceIndex + 21);\r\n    var exitPageUrn = null;\r\n    if (window.location.href.indexOf('?exitPageUrn=') > 0 && window.location.href.indexOf('episode') > 0) {\r\n        exitPageUrn = window.location.href.slice(window.location.href.indexOf('?exitPageUrn=') + '?exitPageUrn='.length);\r\n    }\r\n    var limit = 0;\r\n    if (titleHref.indexOf('series') == 0) {\r\n        titleHref = \"\";\r\n    }\r\n    else if (exitPageUrn) {\r\n        titleHref = 'https://play.hbomax.com' + exitPageUrn.replace('series', 'page') + ':type:series';\r\n    }\r\n    getRatings({ id: titleHref, episode: episodeID, click: true });\r\n    await delay(5000);\r\n    // Waits for the video to load.\r\n    while (!document.getElementsByTagName('video').length || limit > 50) {\r\n        limit += 1;\r\n        await delay(500);\r\n    }\r\n    var endTime;\r\n    var startTime;\r\n    var duration;\r\n    startTime = document.getElementsByTagName('video')[0].currentTime;\r\n    duration = document.getElementsByTagName('video')[0].duration;\r\n    // While we are still watching the show, update the end time.\r\n    while (window.location.href.indexOf(episodeID) > 0) {\r\n        try {\r\n            if (window.location.href.indexOf(episodeID) > 0) {\r\n                if (!isNaN(document.getElementsByTagName('video')[0].currentTime)) {\r\n                    endTime = document.getElementsByTagName('video')[0].currentTime;\r\n                }\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            break;\r\n        }\r\n        await delay(10);\r\n    }\r\n    var start = Math.floor((startTime / duration) * 100);\r\n    var end = Math.floor((endTime / duration) * 100);\r\n    if (isNaN(start)) {\r\n        console.log('Got NAN for start');\r\n        start = 0;\r\n    }\r\n    if (isNaN(end)) {\r\n        console.log('Got NAN for end');\r\n        end = 0;\r\n    }\r\n    getRatings({ id: titleHref, episode: episodeID, click: true, start: start, end: end });\r\n}\r\nasync function handleTitleCardHover() {\r\n    const hoveredTitleCard = Array.from(document.querySelectorAll(\":hover\")).pop().closest('a');\r\n    // ensures we only load the rating once per title card\r\n    if (hoveredTitleCard.parentElement.querySelectorAll(\".ratings-loader,.ratings\").length == 0\r\n        && hoveredTitleCard.href.includes(':type:')\r\n        && !(hoveredTitleCard.href.includes('episode'))) {\r\n        addLoader(hoveredTitleCard.children[0].children[0], 0.75);\r\n        var ratings = { rt_rating: 'N/A', imdb_rating: 'N/A', imdb_color: \"#FFF\", rt_color: \"#FFF\" };\r\n        const titleHref = getHBOTitleHref();\r\n        try {\r\n            ratings = await getRatings({ id: titleHref });\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n        // Select class name based on existing elements.\r\n        const ratingsElement = document.createElement(\"h2\");\r\n        ratingsElement.className = \"ratings css-1rynq56 r-dnmrzs r-1udh08x r-1udbk01 r-3s2u2q r-1iln25a\";\r\n        ratingsElement.innerHTML = `IMDb: <span style=\"color:${ratings.imdb_color}\">${ratings.imdb_rating}</span> \\u00A0 Rotten Tomatoes: <span style=\"color:${ratings.rt_color}\">${ratings.rt_rating}</span>`;\r\n        ratingsElement.setAttribute('style', 'color: rgba(255, 255, 255, 0.7); font-family: StreetLCG2; font-weight: 400; font-style: normal; font-size: 12px; letter-spacing: 0.5px; line-height: 18px;');\r\n        removeLoader(hoveredTitleCard.children[0].children[0]);\r\n        // Insert ratings element if not a trailer\r\n        if (!hoveredTitleCard.href.includes('extra')) {\r\n            var inserted = false;\r\n            for (let index = 0; index < hoveredTitleCard.children.length; index++) {\r\n                if (hoveredTitleCard.children[index].getAttribute('data-testid') == 'attribution-text'\r\n                    || hoveredTitleCard.children[index].getAttribute('data-testid') == 'tile-details-container') {\r\n                    hoveredTitleCard.insertBefore(ratingsElement, hoveredTitleCard.children[index]);\r\n                    inserted = true;\r\n                }\r\n            }\r\n            if (!inserted) {\r\n                hoveredTitleCard.appendChild(ratingsElement);\r\n            }\r\n            fadeIn(ratingsElement, 0.1);\r\n        }\r\n    }\r\n}\r\nasync function handleVisibleTiles() {\r\n    // Select only visible tiles.\r\n    let tiles = document.querySelectorAll('.StyledTileLink-Beam-Web-Ent__sc-ljn9vj-25.cWVPKn.skipNavFocusable[data-first-visible=\"true\"]');\r\n    for (let i = 0; i < tiles.length; i++) {\r\n        allVisibleTiles.add(tiles[i]);\r\n    }\r\n    if (allVisibleTiles.size == tilesLoadedOrBeingLoaded.size)\r\n        return;\r\n    for (const tile of allVisibleTiles) {\r\n        let tileElement, tileSection, isTopTen;\r\n        try {\r\n            tileElement = tile;\r\n        }\r\n        catch (error) {\r\n            console.log(\"Encountered an error processing tile: \" + tile);\r\n            console.log(error);\r\n        }\r\n        try {\r\n            // The row of tiles containing this tile.\r\n            tileSection = tileElement.parentElement.parentElement.parentElement.parentElement.parentElement;\r\n            isTopTen = tileSection.getAttribute(\"data-testid\") == \"home-page-rail-top-10-movies_numberedRail\"\r\n                || tileSection.getAttribute(\"data-testid\") == \"home-page-rail-top-10-series_numberedRail\";\r\n        }\r\n        catch (error) {\r\n            // Don't do anything, since this can actually be expected behavior in certain cases\r\n            // such as in the search page where there are no tile sections.\r\n        }\r\n        // If the current tile already has ratings or is currently being processed, or is null, skip.\r\n        let showName = tileElement.getAttribute(\"aria-label\");\r\n        if (tileElement.getElementsByTagName('h2').length > 0 ||\r\n            tilesLoadedOrBeingLoaded.has(showName)\r\n            || tileElement.href == null)\r\n            continue;\r\n        // Prevent duplicates being added from other threads.\r\n        tilesLoadedOrBeingLoaded.add(showName);\r\n        let ratings;\r\n        try {\r\n            ratings = await getRatings({ id: tileElement.href });\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error getting ratings for: \" + tileElement.href);\r\n            console.log(error);\r\n            ratings = { rt_rating: 'N/A', imdb_rating: 'N/A', imdb_color: \"#FFFFFF\", rt_color: \"#FFFFFF\" };\r\n        }\r\n        const ratingsElement = document.createElement(\"h2\");\r\n        ratingsElement.className = \"ratings css-1rynq56 r-dnmrzs r-1udh08x r-1udbk01 r-3s2u2q r-1iln25a\";\r\n        ratingsElement.innerHTML = `IMDb: <span style=\"color:${ratings.imdb_color}\">${ratings.imdb_rating}</span>\\u00A0Rotten Tomatoes: <span style=\"color:${ratings.rt_color}\">${ratings.rt_rating}</span>`;\r\n        ratingsElement.setAttribute('style', 'color: rgba(255, 255, 255, 0.7); font-family: StreetLCG2; font-weight: 400; font-style: normal; font-size: 10px; letter-spacing: 0.5px; line-height: 18px;');\r\n        ratingsElement.style.opacity = '0';\r\n        // Special UI for top ten series/movies section on homepage.\r\n        if (isTopTen) {\r\n            ratingsElement.style.marginLeft = '80px';\r\n            ratingsElement.style.position = 'absolute';\r\n            tileElement.parentElement.parentElement.style.height = '249px';\r\n        }\r\n        tileElement.appendChild(ratingsElement);\r\n        fadeIn(ratingsElement, 0.0);\r\n    }\r\n}\r\nfunction fadeIn(item, i) {\r\n    i += 0.2;\r\n    item.style.opacity = i;\r\n    if (i < 1)\r\n        setTimeout(() => fadeIn(item, i), 50);\r\n}\r\nexport function getHBOTitleHref() {\r\n    const hoveredTitleCard = Array.from(document.querySelectorAll(\":hover\")).pop();\r\n    try {\r\n        const titleHref = hoveredTitleCard.closest('a').href;\r\n        return titleHref.slice(0, titleHref.indexOf(\":type:\"));\r\n    }\r\n    catch (TypeError) {\r\n        return null;\r\n    }\r\n}\r\n","import { onDisneyDetailsScreen, onDisneyWatchPage } from \"./sites/disney+\";\r\nimport { getNetflixTitleHref, onNetflixHomepage, onNetflixDetailsPage, onNetflixWatchPage } from \"./sites/netflix\";\r\nimport { getHBOTitleHref, onHBOHomepage, onHBOWatchPage, onHBODetailsScreen, clearAllHBOTiles } from \"./sites/hbo\";\r\nvar StreamingSite;\r\n(function (StreamingSite) {\r\n    StreamingSite[StreamingSite[\"Netflix\"] = 0] = \"Netflix\";\r\n    StreamingSite[StreamingSite[\"DisneyPlus\"] = 1] = \"DisneyPlus\";\r\n    StreamingSite[StreamingSite[\"HBOMax\"] = 2] = \"HBOMax\";\r\n    StreamingSite[StreamingSite[\"None\"] = 3] = \"None\";\r\n})(StreamingSite || (StreamingSite = {}));\r\nvar PageType;\r\n(function (PageType) {\r\n    PageType[PageType[\"Homepage\"] = 0] = \"Homepage\";\r\n    PageType[PageType[\"Details\"] = 1] = \"Details\";\r\n    PageType[PageType[\"Watching\"] = 2] = \"Watching\";\r\n    PageType[PageType[\"None\"] = 3] = \"None\";\r\n})(PageType || (PageType = {}));\r\n// clear stored ratings \r\nchrome.storage.local.clear();\r\nvar currSite = StreamingSite.None;\r\nvar oldHref = document.location.href;\r\nvar lastViewedTitleHref = null;\r\nwindow.addEventListener(\"load\", onLoad);\r\nasync function onLoad(event) {\r\n    // Check if the extension is enabled.\r\n    if ((await chrome.storage.sync.get({ 'hidden': false })).hidden)\r\n        return;\r\n    // Determine what streaming site we are on\r\n    if (window.location.href.indexOf(\"netflix.com/\") > -1) {\r\n        currSite = StreamingSite.Netflix;\r\n        window.addEventListener(\"mousedown\", function () {\r\n            if (getNetflixTitleHref()) {\r\n                lastViewedTitleHref = getNetflixTitleHref();\r\n            }\r\n        });\r\n        if (window.location.href.indexOf(\"title\") > -1) {\r\n            onNetflixDetailsPage();\r\n        }\r\n    }\r\n    else if (window.location.href.indexOf(\"disneyplus.com/\") > -1) {\r\n        currSite = StreamingSite.DisneyPlus;\r\n    }\r\n    else if (window.location.href.indexOf(\"hbomax.com/\") > -1\r\n        || window.location.href.indexOf(\"play.max.com/\") > -1) {\r\n        currSite = StreamingSite.HBOMax;\r\n        window.addEventListener(\"mousedown\", function () {\r\n            if (getHBOTitleHref()) {\r\n                lastViewedTitleHref = getHBOTitleHref();\r\n            }\r\n        });\r\n    }\r\n    // Start observing the DOM for mutations\r\n    const targetNode = document.getRootNode();\r\n    const config = { childList: true, subtree: true };\r\n    const observer = new MutationObserver(onDomChange);\r\n    observer.observe(targetNode, config);\r\n}\r\n// Maxiumum one call per DOM change.\r\nvar previousDomChangeType = null;\r\nasync function onDomChange() {\r\n    if (currSite === StreamingSite.Netflix) {\r\n        if (getPageType() === PageType.Homepage) {\r\n            onNetflixHomepage();\r\n            previousDomChangeType = PageType.Homepage;\r\n        }\r\n        if (oldHref != document.location.href) {\r\n            oldHref = document.location.href;\r\n            if (getPageType() === PageType.Details) {\r\n                onNetflixDetailsPage();\r\n                previousDomChangeType = PageType.Details;\r\n            }\r\n            if (getPageType() === PageType.Watching && previousDomChangeType != PageType.Watching) {\r\n                previousDomChangeType = PageType.Watching;\r\n                if (lastViewedTitleHref) {\r\n                    onNetflixWatchPage(lastViewedTitleHref);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // ------------------\r\n    if (currSite === StreamingSite.DisneyPlus) {\r\n        // We can't do disney plus ratings on hover on the main page\r\n        // this is because we don't have access to the link of the show/movie at any point, anywhere on the homepage.\r\n        // the most we can get is the title of the show in the current language, but that could cause issues.\r\n        if (getPageType() === PageType.Homepage && previousDomChangeType != PageType.Homepage) {\r\n            previousDomChangeType = PageType.Homepage;\r\n            lastViewedTitleHref = null;\r\n        }\r\n        // We can only load the rating on the details screen.\r\n        if (getPageType() === PageType.Details && lastViewedTitleHref != window.location.href) {\r\n            previousDomChangeType = PageType.Details;\r\n            lastViewedTitleHref = window.location.href;\r\n            onDisneyDetailsScreen();\r\n        }\r\n        if (getPageType() === PageType.Watching && previousDomChangeType != PageType.Watching) {\r\n            previousDomChangeType = PageType.Watching;\r\n            if (lastViewedTitleHref) {\r\n                onDisneyWatchPage(lastViewedTitleHref);\r\n            }\r\n        }\r\n    }\r\n    // ------------------\r\n    if (currSite === StreamingSite.HBOMax) {\r\n        if (getPageType() === PageType.Homepage) {\r\n            if (previousDomChangeType != PageType.Homepage || oldHref != window.location.href) {\r\n                clearAllHBOTiles();\r\n            }\r\n            oldHref = window.location.href;\r\n            previousDomChangeType = PageType.Homepage;\r\n            onHBOHomepage();\r\n        }\r\n        if (getPageType() === PageType.Details && (lastViewedTitleHref != window.location.href || window.location.href.indexOf(\"play.max.com\") > -1)) {\r\n            if (previousDomChangeType != PageType.Details || oldHref != window.location.href) {\r\n                clearAllHBOTiles();\r\n            }\r\n            oldHref = window.location.href;\r\n            previousDomChangeType = PageType.Details;\r\n            lastViewedTitleHref = window.location.href;\r\n            onHBODetailsScreen();\r\n        }\r\n        if (getPageType() === PageType.Watching && previousDomChangeType != PageType.Watching) {\r\n            previousDomChangeType = PageType.Watching;\r\n            ``;\r\n            onHBOWatchPage(lastViewedTitleHref);\r\n        }\r\n    }\r\n}\r\nfunction getPageType() {\r\n    var currPage = PageType.None;\r\n    if (currSite === StreamingSite.Netflix) {\r\n        if (window.location.href.indexOf(\"jbv\") > -1\r\n            || window.location.href.indexOf(\"title\") > -1) {\r\n            currPage = PageType.Details;\r\n        }\r\n        else if (window.location.href.indexOf(\"watch\") > -1) {\r\n            currPage = PageType.Watching;\r\n        }\r\n        else {\r\n            currPage = PageType.Homepage;\r\n        }\r\n    }\r\n    if (currSite === StreamingSite.DisneyPlus) {\r\n        if (window.location.href.indexOf(\"home\") > -1) {\r\n            currPage = PageType.Homepage;\r\n        }\r\n        else if (/.*\\/(movies|series)\\/.*\\/.*/.test(window.location.href)) {\r\n            currPage = PageType.Details;\r\n        }\r\n        else if (window.location.href.indexOf(\"video\") > -1) {\r\n            currPage = PageType.Watching;\r\n        }\r\n        else {\r\n            currPage = PageType.None;\r\n        }\r\n    }\r\n    if (currSite === StreamingSite.HBOMax) {\r\n        if (window.location.href.indexOf(\"player\") > -1) {\r\n            currPage = PageType.Watching;\r\n        }\r\n        else if (window.location.href.indexOf(\":type:series\") > -1\r\n            || window.location.href.indexOf(\":type:feature\") > -1\r\n            || window.location.href.indexOf(\"/show/\") > -1\r\n            || window.location.href.indexOf(\"/movie/\") > -1) {\r\n            currPage = PageType.Details;\r\n        }\r\n        else if (window.location.href.indexOf(\"/page/urn:hbo:page:\") > -1\r\n            || window.location.href.indexOf(\":collection:\") > -1\r\n            || window.location.href.indexOf(\":franchise:\") > -1\r\n            || window.location.href == \"https://play.max.com/\"\r\n            || window.location.href == \"https://play.max.com/home\"\r\n            || window.location.href.indexOf(\"https://play.max.com/search\") > -1) {\r\n            currPage = PageType.Homepage;\r\n        }\r\n        else {\r\n            currPage = PageType.None;\r\n        }\r\n    }\r\n    return currPage;\r\n}\r\n"],"names":[],"sourceRoot":""}